generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  role  String
  users User[]
}

model User {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String
  password     String
  address      String?
  profileImage String?
  roleId       Int
  role         Role          @relation(fields: [roleId], references: [id])
  shoppingCart ShoppingCart?
}

model Category {
  id           Int            @id @default(autoincrement())
  name         String
  books        Book[]
  otherProduct OtherProduct[]
}

model Book {
  id                Int                 @id @default(autoincrement())
  categoryId        Int
  category          Category            @relation(fields: [categoryId], references: [id])
  ISBN              String              @unique
  title             String
  quantity          Int
  editorial         String
  price             String
  ItemsShoppingCart ItemsShoppingCart[]
  stock             Stock[]
}

model OtherProduct {
  id                Int                 @id @default(autoincrement())
  categoryId        Int
  category          Category            @relation(fields: [categoryId], references: [id])
  name              String
  quantity          Int
  code              String              @unique
  price             String
  ItemsShoppingCart ItemsShoppingCart[]
  stock             Stock[]
}

model ShoppingCart {
  id               Int                 @id @default(autoincrement())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  user             User                @relation(fields: [userId], references: [id])
  userId           Int                 @unique
  itemShoppingCart ItemsShoppingCart[]
}

model ItemsShoppingCart {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  quantity       Int
  shoppingCart   ShoppingCart  @relation(fields: [shoppingCartId], references: [id])
  shoppingCartId Int
  book           Book?         @relation(fields: [bookId], references: [id])
  bookId         Int?
  otherProduct   OtherProduct? @relation(fields: [otherProductId], references: [id])
  otherProductId Int?
}
s
model Stock {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  quantity       Int
  book           Book?         @relation(fields: [bookId], references: [id])
  bookId         Int?
  otherProduct   OtherProduct? @relation(fields: [otherProductId], references: [id])
  otherProductId Int?
  supplier       Supplier      @relation(fields: [supplierId], references: [id])
  supplierId     Int
}

model Supplier {
  id      Int     @id @default(autoincrement())
  name    String
  address String
  stock   Stock[]
}
